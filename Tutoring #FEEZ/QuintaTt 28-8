Ejercicio: Sistema de Gestión de Productos en una Tienda

Descripción:
Crea un programa que gestione un inventario de productos en una tienda. Cada producto tiene un nombre, un código de producto, y un precio. El programa debe permitir:

1. Agregar productos al inventario.
2. Mostrar la información de todos los productos.
3. Actualizar el precio de un producto dado su código.
4. Mostrar el producto más caro del inventario.

Requisitos:
1. Clase `Producto`:
   - Atributos: `nombre` (string), `codigo` (int), `precio` (float).
   - Métodos:
     - `establecerDatos`: Establece los atributos del producto.
     - `mostrarDatos`: Muestra la información del producto.
     - `actualizarPrecio`: Actualiza el precio del producto.
     - `obtenerPrecio`: Devuelve el precio del producto.
     - `obtenerCodigo`: Devuelve el código del producto.

2. Funciones:
   - `agregarProducto`: Agrega un nuevo producto al arreglo dinámico.
   - `mostrarInventario`: Muestra la información de todos los productos.
   - `actualizarPrecioPorCodigo`: Actualiza el precio de un producto dado su código.
   - `encontrarProductoMasCaro`: Encuentra y muestra el producto más caro del inventario.

3. En la función `main`:
   - Permite al usuario ingresar la cantidad de productos y luego sus datos.
   - Permite actualizar el precio de un producto dado su código.
   - Muestra la información de todos los productos y el producto más caro.

Solución Propuesta

#include <iostream>
#include <string>

using namespace std;

class Producto {
private:
    string nombre;
    int codigo;
    float precio;
public:
    void establecerDatos(string nom, int cod, float pre) {
        nombre = nom;
        codigo = cod;
        precio = pre;
    }

    void mostrarDatos() {
        printf("Nombre: %s, Código: %d, Precio: %.2f\n", nombre.c_str(), codigo, precio);
    }

    void actualizarPrecio(float nuevoPrecio) {
        precio = nuevoPrecio;
    }

    float obtenerPrecio() {
        return precio;
    }

    int obtenerCodigo() {
        return codigo;
    }
};

void agregarProducto(Producto**& inventario, int& numProductos, string nombre, int codigo, float precio) {
    Producto* nuevoProducto = new Producto();
    nuevoProducto->establecerDatos(nombre, codigo, precio);

    Producto** nuevoInventario = new Producto*[numProductos + 1];
    for (int i = 0; i < numProductos; i++) {
        nuevoInventario[i] = inventario[i];
    }
    nuevoInventario[numProductos] = nuevoProducto;

    delete[] inventario;
    inventario = nuevoInventario;
    numProductos++;
}

void mostrarInventario(Producto** inventario, int numProductos) {
    printf("Información de todos los productos:\n");
    for (int i = 0; i < numProductos; i++) {
        inventario[i]->mostrarDatos();
    }
}

void actualizarPrecioPorCodigo(Producto** inventario, int numProductos, int codigo, float nuevoPrecio) {
    for (int i = 0; i < numProductos; i++) {
        if (inventario[i]->obtenerCodigo() == codigo) {
            inventario[i]->actualizarPrecio(nuevoPrecio);
            printf("Precio del producto con código %d actualizado a %.2f\n", codigo, nuevoPrecio);
            return;
        }
    }
    printf("Producto con código %d no encontrado.\n", codigo);
}

void encontrarProductoMasCaro(Producto** inventario, int numProductos) {
    if (numProductos == 0) {
        printf("El inventario está vacío.\n");
        return;
    }

    int indiceMasCaro = 0;
    for (int i = 1; i < numProductos; i++) {
        if (inventario[i]->obtenerPrecio() > inventario[indiceMasCaro]->obtenerPrecio()) {
            indiceMasCaro = i;
        }
    }
    printf("\nProducto más caro:\n");
    inventario[indiceMasCaro]->mostrarDatos();
}

int main() {
    int numProductos = 0;
    Producto** inventario = nullptr;

    int cantidad;
    printf("Ingrese la cantidad de productos: ");
    scanf("%d", &cantidad);

    for (int i = 0; i < cantidad; i++) {
        char nombre[50];
        int codigo;
        float precio;

        printf("\nProducto %d:\n", i + 1);
        printf("Ingrese el nombre: ");
        scanf("%s", nombre);
        printf("Ingrese el código: ");
        scanf("%d", &codigo);
        printf("Ingrese el precio: ");
        scanf("%f", &precio);

        agregarProducto(inventario, numProductos, string(nombre), codigo, precio);
    }

    mostrarInventario(inventario, numProductos);

    int codigoActualizar;
    float nuevoPrecio;
    printf("\nIngrese el código del producto a actualizar el precio: ");
    scanf("%d", &codigoActualizar);
    printf("Ingrese el nuevo precio: ");
    scanf("%f", &nuevoPrecio);

    actualizarPrecioPorCodigo(inventario, numProductos, codigoActualizar, nuevoPrecio);

    mostrarInventario(inventario, numProductos);
    encontrarProductoMasCaro(inventario, numProductos);

    for (int i = 0; i < numProductos; i++) {
        delete inventario[i];
    }
    delete[] inventario;

    return 0;
}


Ejercicio 2: Sistema de Gestión de Biblioteca

Descripción:

Crea un programa en C++ que simule un sistema básico de gestión de una biblioteca. El sistema debe permitir al usuario realizar las siguientes operaciones:

1. Agregar un libro: El usuario debe poder agregar un nuevo libro a la biblioteca ingresando su título, autor, año de publicación, y código de identificación (ID).
2. Buscar un libro: El usuario debe poder buscar un libro por su título o código de identificación y mostrar la información del libro si existe.
3. Listar todos los libros: El sistema debe permitir listar todos los libros registrados en la biblioteca, mostrando toda la información disponible de cada libro.
4. Eliminar un libro: El usuario debe poder eliminar un libro de la biblioteca usando su código de identificación.

Especificaciones:

- Crea una clase `Libro` que tenga atributos para el título, autor, año de publicación, y código de identificación (ID).
- Crea una clase `Biblioteca` que tenga un arreglo dinámico de objetos `Libro` para almacenar los libros.
- La clase `Biblioteca` debe tener métodos para agregar, buscar, listar, y eliminar libros.
- Maneja la memoria dinámica de manera adecuada para agregar y eliminar libros.

Consideraciones:

- El código debe ser escrito en un solo archivo `.cpp`.
- Usa `using namespace std;`, `printf`, y `scanf` en lugar de `cout` y `cin`.
- La entrada de datos debe manejarse con cuidado para evitar desbordamientos de buffer.



Ejercicio 3: Sistema de Gestión de Empleados

Descripción del Problema:

Diseña un sistema de gestión de empleados para una empresa. Cada empleado tiene los siguientes atributos:

- Nombre: Una cadena de caracteres.
- ID: Un número entero que identifica de manera única a cada empleado.
- Salario: Un número de punto flotante que representa el salario del empleado.
- Departamento: Una cadena de caracteres que representa el departamento al que pertenece el empleado.

El sistema debe permitir:

1. Agregar un nuevo empleado: El usuario ingresará los datos de un nuevo empleado y este será agregado a un arreglo dinámico de empleados.
2. Mostrar todos los empleados: Muestra la lista de todos los empleados, incluyendo su nombre, ID, salario y departamento.
3. Buscar un empleado por ID: El usuario puede buscar un empleado por su ID y se deben mostrar todos los detalles del empleado.
4. Modificar el salario de un empleado: Permite al usuario buscar un empleado por ID y modificar su salario.
5. Eliminar un empleado por ID: Elimina un empleado del arreglo dinámico de empleados.

Implementación en C++

#include <iostream>
#include <cstring>
#include <cstdlib>

using namespace std;

class Empleado {
public:
    char nombre[50];
    int ID;
    float salario;
    char departamento[50];

    Empleado() {}

    Empleado(const char* _nombre, int _ID, float _salario, const char* _departamento) {
        strcpy(nombre, _nombre);
        ID = _ID;
        salario = _salario;
        strcpy(departamento, _departamento);
    }
};

void agregarEmpleado(Empleado**& empleados, int& numEmpleados);
void mostrarEmpleados(Empleado** empleados, int numEmpleados);
Empleado* buscarEmpleado(Empleado** empleados, int numEmpleados, int ID);
void modificarSalario(Empleado** empleados, int numEmpleados, int ID);
void eliminarEmpleado(Empleado**& empleados, int& numEmpleados, int ID);

int main() {
    Empleado** empleados = nullptr;
    int numEmpleados = 0;
    int opcion, ID;

    do {
        printf("\nMenu:\n");
        printf("1. Agregar Empleado\n");
        printf("2. Mostrar Empleados\n");
        printf("3. Buscar Empleado por ID\n");
        printf("4. Modificar Salario\n");
        printf("5. Eliminar Empleado\n");
        printf("6. Salir\n");
        printf("Seleccione una opcion: ");
        scanf("%d", &opcion);

        switch (opcion) {
            case 1:
                agregarEmpleado(empleados, numEmpleados);
                break;
            case 2:
                mostrarEmpleados(empleados, numEmpleados);
                break;
            case 3:
                printf("Ingrese ID del empleado: ");
                scanf("%d", &ID);
                Empleado* emp;
                emp = buscarEmpleado(empleados, numEmpleados, ID);
                if (emp != nullptr) {
                    printf("Empleado encontrado: %s, ID: %d, Salario: %.2f, Departamento: %s\n", 
                            emp->nombre, emp->ID, emp->salario, emp->departamento);
                } else {
                    printf("Empleado con ID %d no encontrado.\n", ID);
                }
                break;
            case 4:
                printf("Ingrese ID del empleado: ");
                scanf("%d", &ID);
                modificarSalario(empleados, numEmpleados, ID);
                break;
            case 5:
                printf("Ingrese ID del empleado: ");
                scanf("%d", &ID);
                eliminarEmpleado(empleados, numEmpleados, ID);
                break;
            case 6:
                printf("Saliendo...\n");
                break;
            default:
                printf("Opcion no valida.\n");
        }
    } while (opcion != 6);

    // Liberar memoria
    for (int i = 0; i < numEmpleados; i++) {
        delete empleados[i];
    }
    delete[] empleados;

    return 0;
}

// Funciones a implementar...
// agregarEmpleado, mostrarEmpleados, buscarEmpleado, modificarSalario, eliminarEmpleado